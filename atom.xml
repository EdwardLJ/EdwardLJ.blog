<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Edward.LJ</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://edwardlj.github.io/"/>
  <updated>2019-01-29T08:01:21.687Z</updated>
  <id>https://edwardlj.github.io/</id>
  
  <author>
    <name>Edward.LJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PDFToTXT</title>
    <link href="https://edwardlj.github.io/PDFToTXT/"/>
    <id>https://edwardlj.github.io/PDFToTXT/</id>
    <published>2019-01-29T04:22:49.431Z</published>
    <updated>2019-01-29T08:01:21.687Z</updated>
    
    <content type="html"><![CDATA[<p><font face="黑体" color="0099ff" size="72">1. 如何用python将PDF转为TXT</font><br>所需依赖：pdfminer3k、python-docx<br>所需步骤：解析PDF、取出数据、保存为TXT/Word<br>遇到的坑：</p><ol><li>最开始安装的依赖为pdfminer,而python环境为3.7，导致无法调用（并且包的依赖其实应该是install pdfminer3k才对），这里我一直无法理解的就是明明包名为pdfminer，但是安装却要是pdfminer3k,其他类似的很多，表示暂时还无法理解，所以每次都需要相应的依赖是个啥……</li><li>Document无法引用，安装的docx不存在，哈哈，这个是因为之前用VS2017安装的docx里面引用了exceptions，python3.x版本移除了exceptions模块，但是docx包中引用了该模块,故有掉进去了，嗯嗯，在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 安装新的python_docx‑0.8.10‑py2.py3‑none‑any.whl即可。</li><li>上面引用没问题后，下面一个坑好像就么得了，然后去理解包中使用的方法的含义吧——“努力、奋斗”</li></ol><p>方法解读：<br>“窃”一个图：<img src="/images/pdfminer.png" alt=""><br>要解析PDF至少需要两个类：PDFParser 和 PDFDocument，PDFParser 从文件中提取数据，PDFDocument保存数据。另外还需要PDFPageInterpreter去处理页面内容，PDFDevice将其转换为我们所需要的。PDFResourceManager用于保存共享内容例如字体或图片。</p><p>Python os.listdir() 方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line"># 打开文件</span><br><span class="line">path = &quot;/var/www/html/&quot;</span><br><span class="line">dirs = os.listdir( path )</span><br><span class="line"></span><br><span class="line"># 输出所有文件和文件夹</span><br><span class="line">for file in dirs:</span><br><span class="line">   print file</span><br></pre></td></tr></table></figure></p><p><font face="黑体" color="0099ff" size="72">2. Let’s do it</font></p><h2 id="PDF转TXT"><a href="#PDF转TXT" class="headerlink" title="PDF转TXT"></a>PDF转TXT</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: Ed</span><br><span class="line">@software: VS2017</span><br><span class="line">@file: PDFToTXT.py</span><br><span class="line">@time: 2019/1/29</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import sys</span><br><span class="line">import importlib</span><br><span class="line">importlib.reload(sys)</span><br><span class="line"></span><br><span class="line">from pdfminer.pdfparser import PDFParser,PDFDocument</span><br><span class="line">from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter</span><br><span class="line">from pdfminer.converter import PDFPageAggregator</span><br><span class="line">from pdfminer.layout import LTTextBoxHorizontal,LAParams</span><br><span class="line">from pdfminer.pdfinterp import PDFTextExtractionNotAllowed</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"> 解析pdf文本，保存到txt文件中</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">path = r&apos;E:\pyworkspace\pdf2word-master\Test\pdf\Test PDF to Word.pdf&apos;</span><br><span class="line">def parse():</span><br><span class="line">    fp = open(path, &apos;rb&apos;) # 以二进制读模式打开</span><br><span class="line"></span><br><span class="line">    praser = PDFParser(fp) #用文件对象来创建一个pdf文档分析器,PDFParser 从文件中提取数据</span><br><span class="line">    doc = PDFDocument() #保存数据</span><br><span class="line">    praser.set_document(doc) # 连接分析器 与文档对象</span><br><span class="line">    doc.set_parser(praser)</span><br><span class="line">    doc.initialize() # 提供初始化密码,如果没有密码 就创建一个空的字符串</span><br><span class="line"></span><br><span class="line">    # 检测文档是否提供txt转换，不提供就忽略</span><br><span class="line">    if not doc.is_extractable:</span><br><span class="line">        raise PDFTextExtractionNotAllowed</span><br><span class="line">    else:</span><br><span class="line">        rsrcmgr = PDFResourceManager() # 创建PDf 资源管理器 来管理共享资源</span><br><span class="line">        laparams = LAParams() </span><br><span class="line">        device = PDFPageAggregator(rsrcmgr, laparams=laparams) # 创建一个PDF设备对象</span><br><span class="line">        interpreter = PDFPageInterpreter(rsrcmgr, device) # 创建一个PDF解释器对象,处理页面内容</span><br><span class="line"></span><br><span class="line">        # 循环遍历列表，每次处理一个page的内容</span><br><span class="line">        for page in doc.get_pages(): # doc.get_pages() 获取page列表</span><br><span class="line">            interpreter.process_page(page) # 接受该页面的LTPage对象        </span><br><span class="line">            layout = device.get_result() # 这里layout是一个LTPage对象 里面存放着 这个page解析出的各种对象 一般包括LTTextBox, LTFigure, LTImage, LTTextBoxHorizontal 等等 想要获取文本就获得对象的text属性，</span><br><span class="line">            </span><br><span class="line">            for x in layout:</span><br><span class="line">                if (isinstance(x, LTTextBoxHorizontal)):</span><br><span class="line">                    with open(r&apos;E:/pyworkspace/pdf2word-master/Test/1.txt&apos;, &apos;a&apos;) as f:</span><br><span class="line">                        results = x.get_text()</span><br><span class="line">                        print(results)</span><br><span class="line">                        f.write(results + &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    parse()</span><br></pre></td></tr></table></figure><h2 id="PDF转Word"><a href="#PDF转Word" class="headerlink" title="PDF转Word"></a>PDF转Word</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from configparser import ConfigParser</span><br><span class="line">from io import StringIO</span><br><span class="line">from io import open</span><br><span class="line">from concurrent.futures import ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">from pdfminer.pdfinterp import PDFResourceManager</span><br><span class="line">from pdfminer.pdfinterp import process_pdf</span><br><span class="line">from pdfminer.converter import TextConverter</span><br><span class="line">from pdfminer.layout import LAParams</span><br><span class="line">from docx import Document</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_from_pdf(file_path):</span><br><span class="line">    with open(file_path, &apos;rb&apos;) as file:</span><br><span class="line">        resource_manager = PDFResourceManager() # 创建PDf 资源管理器</span><br><span class="line">        return_str = StringIO()</span><br><span class="line">        lap_params = LAParams()</span><br><span class="line"></span><br><span class="line">        device = TextConverter(</span><br><span class="line">            resource_manager, return_str, laparams=lap_params)  # 创建一个PDF设备对象</span><br><span class="line">        process_pdf(resource_manager, device, file)</span><br><span class="line">        device.close()</span><br><span class="line"></span><br><span class="line">        content = return_str.getvalue()</span><br><span class="line">        return_str.close()</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def save_text_to_word(content, file_path):</span><br><span class="line">    doc = Document()</span><br><span class="line">    for line in content.split(&apos;\n&apos;):</span><br><span class="line">        paragraph = doc.add_paragraph()</span><br><span class="line">        paragraph.add_run(remove_control_characters(line))</span><br><span class="line">    doc.save(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def remove_control_characters(content):</span><br><span class="line">    mpa = dict.fromkeys(range(32))</span><br><span class="line">    return content.translate(mpa)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pdf_to_word(pdf_file_path, word_file_path):</span><br><span class="line">    content = read_from_pdf(pdf_file_path)</span><br><span class="line">    save_text_to_word(content, word_file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    config_parser = ConfigParser()</span><br><span class="line">    config_parser.read(&apos;config.cfg&apos;) </span><br><span class="line">    config = config_parser[&apos;default&apos;] </span><br><span class="line"></span><br><span class="line">    tasks = []</span><br><span class="line">    with ProcessPoolExecutor(max_workers=int(config[&apos;max_worker&apos;])) as executor:</span><br><span class="line">        for file in os.listdir(config[&apos;pdf_folder&apos;]):</span><br><span class="line">            extension_name = os.path.splitext(file)[1]</span><br><span class="line">            if extension_name != &apos;.pdf&apos;:</span><br><span class="line">                continue</span><br><span class="line">            file_name = os.path.splitext(file)[0]</span><br><span class="line">            pdf_file = config[&apos;pdf_folder&apos;] + &apos;/&apos; + file #E:\pyworkspace\pdf2word-master\Test\pdf</span><br><span class="line">            word_file = config[&apos;word_folder&apos;] + &apos;/&apos; + file_name + &apos;.docx&apos; #E:\pyworkspace\pdf2word-master\Test\word</span><br><span class="line">            print(&apos;正在处理: &apos;, file)</span><br><span class="line">            result = executor.submit(pdf_to_word, pdf_file, word_file)</span><br><span class="line">            tasks.append(result)</span><br><span class="line">    while True:</span><br><span class="line">        exit_flag = True</span><br><span class="line">        for task in tasks:</span><br><span class="line">            if not task.done():</span><br><span class="line">                exit_flag = False</span><br><span class="line">        if exit_flag:</span><br><span class="line">            print(&apos;完成&apos;)</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font face=&quot;黑体&quot; color=&quot;0099ff&quot; size=&quot;72&quot;&gt;1. 如何用python将PDF转为TXT&lt;/font&gt;&lt;br&gt;所需依赖：pdfminer3k、python-docx&lt;br&gt;所需步骤：解析PDF、取出数据、保存为TXT/Word&lt;br&gt;遇到
      
    
    </summary>
    
    
      <category term="python" scheme="https://edwardlj.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2018工作总结</title>
    <link href="https://edwardlj.github.io/2018%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>https://edwardlj.github.io/2018工作总结/</id>
    <published>2019-01-25T09:18:18.578Z</published>
    <updated>2019-01-25T09:22:32.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018工作总结"><a href="#2018工作总结" class="headerlink" title="2018工作总结"></a>2018工作总结</h1><h2 id="一-成就和进步"><a href="#一-成就和进步" class="headerlink" title="一.     成就和进步"></a>一.     成就和进步</h2><p>回顾2018年的工作历程，主要成果与改进大致如下：<br>1)    为芬兰的安装系统做准备<br>2)    在安装期间提供support<br>3)    HouseHolding 与Spliting的设计<br>4)    安装后的bug fix<br>5)    Archive功能的设计<br>6)    第一次系统的性能优化（解决大数据量后执行SQL效率问题）<br>7)    pull与Unpull逻辑的修改与设计<br>8)    配合Costing设计Demo系统<br>9)    Delivery功能的实现<br>10)    第二次性能的优化（主要针对Transaction队列的优化，减少与DB的交互）<br>11)    Archive功能的实现<br>12)    同步的优化<br>在这一年的改进和设计中，见证了Norstar从一个Demo系统到可以安装到生产系统上的软件，是一个质的改变，但是离真正的软件系统依然存在着不小的差距。</p><h2 id="二-学习到的技术和经验"><a href="#二-学习到的技术和经验" class="headerlink" title="二.     学习到的技术和经验"></a>二.     学习到的技术和经验</h2><p>2018上半年还是一个即将毕业的实习生，现在不知不觉已经在我们公司的开发岗位干了1年多了，在这期间受益匪浅：<br>最开始设计一个新的功能时，每次都是直接上手写代码，粗略看来完成新的功能的效率较快，实则不然，在以前这种做法下导致存在许多的Bug，而且写的代码都是写到哪再考虑下一步，这样造成了代码可读性也不是很高，代码逻辑混乱。后来在开会中提到的在开发时，先做需求文档和伪代码设计后，改善了不少，虽然看上去增加了完成的时间，但是从总体考虑对于一个功能和一个Bug实现作出分析后，然后将改进&amp;设计写成文档后，再和大家一起讨论弥补自己设计考虑不周的地方或者有出处的地方进行调整，最后再写代码效率高上不少，减少了后续维护的不少麻烦。在刚开始的时候我每周最期待周四的Code View,在代码分享的例会上对于还是实习生的我能够学习到不少前辈们的设计思维方式以及代码的规范，记得最清楚的就是任总当时说的代码规范的三要素——代码块的注释、对参数的判断、异常处理，还有就是刘工对于代码的封装，实现的通用代码很多，这些都是初步我学习到的经验。<br>在对BPMS System代码逻辑进行梳理的过程中，整理了系统主要的框架模型：winform窗口、WCF服务、Configure配置、ServerDaemon以及各个机制的组成。在这些架构下，我学习到了一个最为核心的技术——线程，以前对于线程只是停留在线程和进程的概念上，但是通过对事件机制、Archive功能设计以及同步机制中体会到了线程能够发挥的作用是巨大的，但是当时我粗浅的理解一个单线程就是new Thread、start Thread、维护一个队列、doaction、停止线程；这样的线程能运行吗，当然能，但是这样的线程能在系统中运行时，你会发现当维护的队列数量较多的，cpu的消耗急剧上升，原因就是忽略了在线程工作的重要的一点——时间片，在多个线程同时工作的系统中，要时刻保证其他线程能够获得时间片去完成他要完成的指令和任务，还有一点在于不能一直保持这个线程的“活跃”状态，需要根据整体考虑线程的优先程度定义执行线程队列的时长。对于多线程，一直是让我后怕的一个地方，每次出问题大部分是由于多线程的地方导致的，例如之前的死锁，还有在多线程中对数据库进行即时的交互导致连接数的不稳定 ，其他线程无法连接到数据库的问题，而往往这种问题又是不好复现也不好从代码的逻辑性去梳理调试能够解决的，对于多线程就提现了系统中Log的重要性，从log中可以大致地分析出那一块出了问题，然后有针对性的去检查整体的逻辑，这点我在开发中还有待欠缺，Log的可读性以及完成性都不强还有待提高。<br>在维护Deno系统中，我学到了一个新的技术——Socket。之前我一直不理解软件与软件之间在没有API的情况下是怎样进行数据的交互的，后来在为Costing做Demo时发现期间Demo总是有些数据无法接收到，或者工作时间长后会stack，这些都影响了正常的Demo流程，通过对Socket的工作接收机制的认识以及在任总的帮助下，查询到了两个问题，一个是在python中开启了过多的socket造成了资源的浪费，还有一个是在接收时不是对每个byte单独new,而是统一采用的一个byte的使用，这样就在高速的接收过程中造成数据的缺失等问题。从Demo上引申到BPMS System，在于其他软件进行交互时也用到了TCPListener,接收触发机制也是这种原理，但是对于指令的传输、接收、和执行Command机制上理解还是不足，没有深刻理解其中的逻辑思路，这些都是我需要自主去学习的地方。<br>对于大数据的处理问题也是今年学习到的一个宝贵的经验。以前对于功能设计的思维模式是即时即用，系统的核心就是处理APT传输过来的piece状态变更，而在这个逻辑中我们涉及到需要查询数据和修改数据，涉及的表包括OrderJobPieces、OrderPiece、OrderTicket、OrderPieceCounting，而且这些表的数据量都是越来越庞大的，所以对于不论是直接查询数据库和直接当时执行对数据库的数据进行Update操作都是非常耗时的，这样导致在系统长期运行后效率急剧下降、Web无法及时响应等问题。第一次的优化中首先将Order信息加载到了内存中，当然维护内存中的Order List 是一个重要的问题，不仅如此，在内存中还储存了与Order相关的表，这样做的好处是我们在对数据进行Select的效率上会有很大的提升，需要注意的是要时刻保证内存中的数据的准确性，还有多个线程在访问的锁定。在组装好一个piece状态变更的SQLS后我们提交给专门执行 sql 的队列，在队列中同样也做了优化，将Transaction中的SQLS进行批量的组装，用以减少和数据库的交互，达到提升执行系统效率的目的。将数据库的数据放入内存固然可以提升访问速度，但是需要格外注意的就是内存的管理问题，在系统运行中，要时刻清理移除不必要的内存占有，比如长时间未使用到的Order和已经完成了的Order等，这些都要及时从内存中拿掉，不然在运行后会造成内存的疯涨，对于这块的核心是Transaction队列的执行效率，也就是向数据库写入数据这块需要不断优化，用以保证在系统高速运行中以及大数据量的处理中达到高效的目的，不然这块的效能如果不搞的话，那么数据库与内存的数据会长时间无法保持一致，并且遗留在系统内存中需要处理的信息会越来越多，造成系统崩溃。对于性能的优化以及大数据量的处理这点还需要继续向大家学习，希望吸收APT的宝贵经验，不断完善OrderTracker的性能。</p><h2 id="三-未来计划"><a href="#三-未来计划" class="headerlink" title="三.     未来计划"></a>三.     未来计划</h2><p>Norstar的系统目前还只是初具雏形，未来还有很多地方需要完善的地方，力争向APT看起，在明年的规划中，主要包括：<br>1)    OrderTracker性能的改进，状态变更的优化<br>2)    Norstar整体功能分析，兼容用户管理与APT Web中的功能<br>3)    项目迁移2017后BPMS Archive的启用<br>4)    对于Norstar整体的Report Delivery的设计<br>5)    GUID唯一Server连接的设计</p><h2 id="四-团队建议"><a href="#四-团队建议" class="headerlink" title="四.     团队建议"></a>四.     团队建议</h2><p>在一年的工作中，衷心感谢大家对我的帮助，让我在工作中成长不少。同时，通过平时的工作，我觉得我们团队还需要：<br>1)    能够仿真模拟生产系统。即需要大数据库的支持和高速运行的生产测试，通过芬兰系统的安装，我看到很多问题是在大数据量和大的工作量的基础下产生的，然而这些问题在我们这边往往无法复现，所以我建议我们需要一个针对线上的一个仿真测试系统，这样我们甚至可以第一时间发现问题，从而得到解决<br>2)    Code View和软件技能共享。通过之前的Code View能够学习更好的编程习惯，而且在分享的过程中也能够加固对代码逻辑的理解，同时也能通过大家的提问弥补代码的不足，并加以改进；对于自己负责的软件操作也可以拿出来演示，大家能够更好地理解这块的工作流程大致思路，为以后的设计提供新的方向</p><h2 id="五-缺陷不足"><a href="#五-缺陷不足" class="headerlink" title="五.     缺陷不足"></a>五.     缺陷不足</h2><p>由于刚从学校出来，在平时的工作上还依然滞留这学校的工作方式，在这期间也感谢大家的包容和及时的提出，在以后的工作中，将努力改善这几点：<br>1)    思维方式的改变，对于系统而言，需要我去思考系统中还存在的问题并且及时加以优化和改进<br>2)    加强代码学习，对于问题难点认真加以思考，作出全面的调查，再和大家进行讨论，作出问题的方案<br>3)    加强责任心，对于软件的运行，时刻保持高度的关注，及时分析系统运行的log，查出存在的问题，予以改正<br>4)    对于细节方面的加强，软件更新交互的准确性需要注意</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018工作总结&quot;&gt;&lt;a href=&quot;#2018工作总结&quot; class=&quot;headerlink&quot; title=&quot;2018工作总结&quot;&gt;&lt;/a&gt;2018工作总结&lt;/h1&gt;&lt;h2 id=&quot;一-成就和进步&quot;&gt;&lt;a href=&quot;#一-成就和进步&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="分享" scheme="https://edwardlj.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Flink &amp; Blink</title>
    <link href="https://edwardlj.github.io/Blink/"/>
    <id>https://edwardlj.github.io/Blink/</id>
    <published>2019-01-04T02:11:45.216Z</published>
    <updated>2019-01-04T02:59:11.741Z</updated>
    
    <content type="html"><![CDATA[<p>先推一下中哥的文章——阿里巴巴，果然开始拥有“预测未来”的能力了。 - 史中的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/53830162" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53830162</a></p><h1 id="序言："><a href="#序言：" class="headerlink" title="序言："></a>序言：</h1><p>在这个文章里深深佩服阿里人对于“美感”的追求，面对新的技术的敏感、敢于攻坚的勇气，当蒋晓伟老湿傅构思出统一的“流失计算引擎”时，甚至能够想象得出那种发现新大陆的鸡冻的心情，太美好了。</p><p>梦想总是要有的，万一实现了呢。</p><p>追求新知识的脚步不能停止，现在极度匮乏概念，更别说攻坚了，当技术架构概念以及经验达到一个地步的时候，嗯，小伙子可以谈谈梦想了。</p><p>有点飘了，他们对于新技术的追求真正做到了“视为己出”，可以全部溢出地搭建Blink，这是我应该学到最为重要的地方。</p><p>Blink80%的架构已经在20%的时间完成，剩余的20%难点花了80%的时间去攻克，看到临近双十一了还在调优代码这一幕，莫名有点好笑又有点感动；倒计时5s出结果时，我想就和我的系统在客户上线安装的时候一样吧，都会向上天祈祷，哈哈。</p><p>“完美主义者”是真的牛逼，阿里人是真的爱完美。</p><h1 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h1><p>Flink是一款分布式的计算引擎，它可以用来做批处理，即处理静态的数据集、历史的数据集;也可以用来做流处理，即实时地处理一些实时数据流，实时地产生数据的结果;也可以用来做一些基于事件的应用。</p><h1 id="Blink"><a href="#Blink" class="headerlink" title="Blink"></a>Blink</h1><p>Blink——阿里巴巴计算引擎的王牌军。</p><h1 id="双十一滚动大屏幕后台的故事"><a href="#双十一滚动大屏幕后台的故事" class="headerlink" title="双十一滚动大屏幕后台的故事"></a>双十一滚动大屏幕后台的故事</h1><p>流式计算架构：</p><ol><li>数据采集：将来自各源头数据实时采集</li><li>中间存储：利用类Kafka Queue进行生产系统和消费系统解耦</li><li>实时计算：环节中最重要环节，订阅实时数据，通过计算规则对窗口中数据进行运算</li><li>结果存储：计算结果数据存入SQL和NoSQL</li><li>可视化：通过API调用结果数据进行展示</li></ol><p><img src="/images/Blink/Blink.png" alt=""></p><p>预知后事如何，请听下回分享……</p><p><strong><em>peace</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先推一下中哥的文章——阿里巴巴，果然开始拥有“预测未来”的能力了。 - 史中的文章 - 知乎&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53830162&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://
      
    
    </summary>
    
    
      <category term="分享" scheme="https://edwardlj.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV的安装问题</title>
    <link href="https://edwardlj.github.io/openCV%E7%9A%84%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
    <id>https://edwardlj.github.io/openCV的安装问题/</id>
    <published>2018-11-20T02:42:28.101Z</published>
    <updated>2018-11-20T03:15:55.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用Python3.7安装了<strong><font color="#FF0000">对应版本的</font></strong>OpenCV后import失败。</p><h1 id="环境及安装步骤"><a href="#环境及安装步骤" class="headerlink" title="环境及安装步骤"></a>环境及安装步骤</h1><ol><li>Python3.7    opencv_python-3.4.3-cp37-cp37m-win_amd64.whl     </li><li>安装语法： pip3 install 文件路径\opencv_python-3.4.3-cp37-cp37m-win_amd64.whl</li><li>安装成功后，在Python37\Lib\site-packages目录下会有cv2的文件夹，如图<br><img src="/images/openCV/OpenCV.png" alt=""></li></ol><p>But:<br><img src="/images/openCV/Error.png" alt=""></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li>打开<strong>init</strong>.py发现里面的from .cv2 import *这句话执行有问题，因为我们安装后的目录结构为cv2\ <strong>init</strong>.py</li><li>所以按照他的写法我们新建一个cv2的文件夹，然后将原来的cv2放入这个目录，完美解决！<br><img src="/images/openCV/Ok.png" alt=""></li></ol><p>OK、OK、OK、anyway,还可以尝试直接改掉代码，piece！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用Python3.7安装了&lt;strong&gt;&lt;font color=&quot;#FF0000&quot;&gt;对应版本的&lt;/font&gt;&lt;/strong&gt;Open
      
    
    </summary>
    
    
      <category term="Python" scheme="https://edwardlj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>itchat</title>
    <link href="https://edwardlj.github.io/itchat/"/>
    <id>https://edwardlj.github.io/itchat/</id>
    <published>2018-11-09T02:03:56.575Z</published>
    <updated>2018-11-09T02:57:07.578Z</updated>
    
    <content type="html"><![CDATA[<p><strong>键</strong></p><pre><code>&quot;FromUserName&quot;: &quot;&quot;,&quot;ToUserName&quot;: &quot;&quot;,&quot;Content&quot;: &quot;&quot;,&quot;StatusNotifyUserName&quot;: &quot;&quot;,&quot;ImgWidth&quot;: 0,&quot;PlayLength&quot;: 0,&quot;RecommendInfo&quot;: {},&quot;StatusNotifyCode&quot;: 0,&quot;NewMsgId&quot;: &quot;&quot;,&quot;Status&quot;: 0,&quot;VoiceLength&quot;: 0,&quot;ForwardFlag&quot;: 0,&quot;AppMsgType&quot;: 0,&quot;Ticket&quot;: &quot;&quot;,&quot;AppInfo&quot;: {},&quot;Url&quot;: &quot;&quot;,&quot;ImgStatus&quot;: 0,&quot;MsgType&quot;: 0,&quot;ImgHeight&quot;: 0,&quot;MediaId&quot;: &quot;&quot;,&quot;MsgId&quot;: &quot;&quot;,&quot;FileName&quot;: &quot;&quot;,&quot;HasProductId&quot;: 0,&quot;FileSize&quot;: &quot;&quot;,&quot;CreateTime&quot;: 0,&quot;SubMsgType&quot;: 0</code></pre><p><strong>send_msg</strong></p><pre><code>语法：send_msg(msg = &quot;Text&quot;, toUserName = &quot;XXX&quot;)参数：msg是要发送的文本，toUserName是发送对象, 如果留空, 将发送给自己，返回值为True或者False</code></pre><p><strong>send_file</strong></p><pre><code>语法：send_file(fileDir, toUserName=None)参数：fileDir是文件路径，返回值为True或者False</code></pre><p><strong>send_image</strong></p><pre><code>语法：send_image(fileDir, toUserName=None)参数：fileDir是文件路径，返回值为True或者False</code></pre><p><strong>send_video</strong></p><pre><code>语法：send_video(fileDir, toUserName=None) 参数：fileDir是文件路径，返回值为True或者False</code></pre><p><strong>回复消息</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import itchat</span><br><span class="line">from itchat.content import TEXT</span><br><span class="line"></span><br><span class="line">@itchat.msg_register(TEXT)   #这里的TEXT表示如果有人发送文本消息，那么就会调用下面的方法</span><br><span class="line">def text_reply(msg):</span><br><span class="line">itchat.send_msg(&apos;已经收到了文本消息，消息内容为%s&apos;%msg[&apos;Text&apos;],toUserName=msg[&apos;FromUserName&apos;])</span><br></pre></td></tr></table></figure></p><p>带对象参数注册, 对应消息对象将调用该方法，其中isFriendChat表示好友之间，isGroupChat表示群聊，isMapChat表示公众号</p><p>对于群消息中添加了三个键：<br>isAt 判断是否 @ 本号<br>ActualNickName : 实际 NickName(昵称)<br>Content : 实际 Content<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def text_reply(msg):</span><br><span class="line">if(msg.isAt):</span><br><span class="line">itchat.send_msg(&apos;已经收到来自&#123;0&#125;@我的消息,内容为：&#123;1&#125;&apos;.format(msg[&apos;ActualNickName&apos;],msg[&apos;Test&apos;]),toUserName = msg[&apos;FromUserName&apos;])</span><br></pre></td></tr></table></figure></p><p><strong>消息类型</strong></p><table><thead><tr><th>参数</th><th style="text-align:center">类型</th><th style="text-align:right">Text 键值</th></tr></thead><tbody><tr><td>TEXT</td><td style="text-align:center">文本</td><td style="text-align:right">文本内容(文字消息)</td></tr><tr><td>MAP</td><td style="text-align:center">地图</td><td style="text-align:right">位置文本(位置分享)</td></tr><tr><td>CARD</td><td style="text-align:center">名片</td><td style="text-align:right">推荐人字典(推荐人的名片)</td></tr><tr><td>SHARING</td><td style="text-align:center">分享</td><td style="text-align:right">分享名称(分享的音乐或者文章等)</td></tr><tr><td>PICTURE</td><td style="text-align:center">下载方法</td><td style="text-align:right">图片/表情</td></tr><tr><td>RECORDING</td><td style="text-align:center">语音</td><td style="text-align:right">下载方法</td></tr><tr><td>ATTACHMENT</td><td style="text-align:center">附件</td><td style="text-align:right">下载方法</td></tr><tr><td>VIDEO</td><td style="text-align:center">小视频</td><td style="text-align:right">下载方法</td></tr><tr><td>FRIENDS</td><td style="text-align:center">好友邀请</td><td style="text-align:right">添加好友所需参数</td></tr><tr><td>SYSTEM</td><td style="text-align:center">系统消息</td><td style="text-align:right">更新内容的用户或群聊的UserName组成的列表</td></tr><tr><td>NOTE</td><td style="text-align:center">通知</td><td style="text-align:right">通知文本(消息撤回等)</td></tr></tbody></table><p><strong>红包消息</strong></p><pre><code>MsgType: 49AppMsgType: 2001FromUserName: 发送方IDToUserName: 接收方IDContent: 未知</code></pre><p><strong><em>安利一波：<a href="https://chenjiabing666.github.io/" target="_blank" rel="noopener">https://chenjiabing666.github.io/</a></em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;键&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;FromUserName&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;ToUserName&amp;quot;: &amp;quot;&amp;quot;,
&amp;quot;Content&amp;quot;: &amp;quo
      
    
    </summary>
    
    
      <category term="Python" scheme="https://edwardlj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2018网易秋招</title>
    <link href="https://edwardlj.github.io/2018%E7%BD%91%E6%98%93%E7%A7%8B%E6%8B%9B/"/>
    <id>https://edwardlj.github.io/2018网易秋招/</id>
    <published>2018-11-08T08:43:54.837Z</published>
    <updated>2018-11-09T02:05:08.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程题-魔法币"><a href="#编程题-魔法币" class="headerlink" title="[编程题] 魔法币"></a>[编程题] 魔法币</h1><pre><code>小易准备去魔法王国采购魔法神器,购买魔法神器需要使用魔法币,但是小易现在一枚魔法币都没有,但是小易有两台魔法机器可以通过投入x(x可以为0)个魔法币产生更多的魔法币。魔法机器1:如果投入x个魔法币,魔法机器会将其变为2x+1个魔法币魔法机器2:如果投入x个魔法币,魔法机器会将其变为2x+2个魔法币小易采购魔法神器总共需要n个魔法币,所以小易只能通过两台魔法机器产生恰好n个魔法币,小易需要你帮他设计一个投入方案使他最后恰好拥有n个魔法币。 输入描述:输入包括一行,包括一个正整数n(1 ≤ n ≤ 10^9),表示小易需要的魔法币数量。输出描述:输出一个字符串,每个字符表示该次小易选取投入的魔法机器。其中只包含字符&apos;1&apos;和&apos;2&apos;。输入例子1:10输出例子1:122***上代码：***<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def sle(n):</span><br><span class="line">   if int(n) &lt; 1:</span><br><span class="line">       return &quot;&quot;</span><br><span class="line">   if int(n) % 2 == 0:</span><br><span class="line">       return sle((int(n) - 2) / 2) + &quot;2&quot;</span><br><span class="line">   else:</span><br><span class="line">       return sle((int(n) - 1) / 2) + &quot;1&quot;</span><br><span class="line">   </span><br><span class="line">n = input()</span><br><span class="line">str = sle(n)</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure></code></pre><h1 id="编程题-相反数"><a href="#编程题-相反数" class="headerlink" title="[编程题] 相反数"></a>[编程题] 相反数</h1><pre><code>为了得到一个数的&quot;相反数&quot;,我们将这个数的数字顺序颠倒,然后再加上原先的数得到&quot;相反数&quot;。例如,为了得到1325的&quot;相反数&quot;,首先我们将该数的数字顺序颠倒,我们得到5231,之后再加上原先的数,我们得到5231+1325=6556.如果颠倒之后的数字有前缀零,前缀零将会被忽略。例如n = 100, 颠倒之后是1. 输入描述:输入包括一个整数n,(1 ≤ n ≤ 10^5)输出描述:输出一个整数,表示n的相反数输入例子1:1325输出例子1:6556***上代码：***<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = input()</span><br><span class="line">b = a[::-1]</span><br><span class="line"></span><br><span class="line">print(int(b) + int(a))</span><br></pre></td></tr></table></figure></code></pre><h1 id="编程题-字符串碎片"><a href="#编程题-字符串碎片" class="headerlink" title="[编程题] 字符串碎片"></a>[编程题] 字符串碎片</h1><pre><code>一个由小写字母组成的字符串可以看成一些同一字母的最大碎片组成的。例如,&quot;aaabbaaac&quot;是由下面碎片组成的:&apos;aaa&apos;,&apos;bb&apos;,&apos;c&apos;。牛牛现在给定一个字符串,请你帮助计算这个字符串的所有碎片的平均长度是多少。输入描述:输入包括一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),s只含小写字母(&apos;a&apos;-&apos;z&apos;)输出描述:输出一个整数,表示所有碎片的平均长度,四舍五入保留两位小数。如样例所示: s = &quot;aaabbaaac&quot;所有碎片的平均长度 = (3 + 2 + 3 + 1) / 4 = 2.25输入例子1:aaabbaaac输出例子1:2.25***上代码：***<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">str1 = input()</span><br><span class="line">count = 0</span><br><span class="line">num1 = 0</span><br><span class="line">it = re.finditer(r&apos;(.)\1*&apos;, str1)</span><br><span class="line">for node in it:</span><br><span class="line">    len_node = len(node.group())#注意这里的.group()</span><br><span class="line">    count+=len_node</span><br><span class="line">    num1 = num1 + 1</span><br><span class="line">print(&apos;%.2f&apos; % (count / num1))</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编程题-魔法币&quot;&gt;&lt;a href=&quot;#编程题-魔法币&quot; class=&quot;headerlink&quot; title=&quot;[编程题] 魔法币&quot;&gt;&lt;/a&gt;[编程题] 魔法币&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;小易准备去魔法王国采购魔法神器,购买魔法神器需要使用魔法币,但是小易现在一枚
      
    
    </summary>
    
    
      <category term="算法 Python" scheme="https://edwardlj.github.io/tags/%E7%AE%97%E6%B3%95-Python/"/>
    
  </entry>
  
  <entry>
    <title>Python矩阵</title>
    <link href="https://edwardlj.github.io/essence/"/>
    <id>https://edwardlj.github.io/essence/</id>
    <published>2018-11-01T02:44:55.099Z</published>
    <updated>2018-11-06T08:22:38.792Z</updated>
    
    <content type="html"><![CDATA[<p>依赖：numpy,inv</p><p>说明：<br>    inv: 矩阵求逆<br>    dot: 矩阵点乘<br>    mat: 二维矩阵<br>    array: 一维数组<br>    A.reshape(1,2),把A输出成1行2列的形式</p><p>上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># inv: 矩阵求逆 dot: 矩阵点乘 mat: 二维矩阵 array: 一维数组#</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">from numpy.linalg import inv</span><br><span class="line"></span><br><span class="line">A = np.mat([1,1])</span><br><span class="line">print(&quot;A:\n&quot;,A)</span><br><span class="line">print(&quot;A.T:\n&quot;,A.T)  #A.T为A的转置</span><br><span class="line">print(&quot;A.reshape:\n&quot;,A.reshape(2,1)) </span><br><span class="line"></span><br><span class="line">B = np.mat([[1,2],[2,3]])</span><br><span class="line">print(&quot;B:\n&quot;,B)</span><br><span class="line">print(&quot;B的逆:\n&quot;, inv(B))</span><br><span class="line"></span><br><span class="line">print(&quot;A .* B &quot; , np.dot(B, A.T))</span><br></pre></td></tr></table></figure></p><p>结果：<br><img src="/images/juzhen.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;依赖：numpy,inv&lt;/p&gt;
&lt;p&gt;说明：&lt;br&gt;    inv: 矩阵求逆&lt;br&gt;    dot: 矩阵点乘&lt;br&gt;    mat: 二维矩阵&lt;br&gt;    array: 一维数组&lt;br&gt;    A.reshape(1,2),把A输出成1行2列的形式&lt;/p&gt;
&lt;p&gt;上
      
    
    </summary>
    
    
      <category term="Python" scheme="https://edwardlj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>WCF服务</title>
    <link href="https://edwardlj.github.io/WCF%E6%9C%8D%E5%8A%A1/"/>
    <id>https://edwardlj.github.io/WCF服务/</id>
    <published>2018-10-26T08:35:57.729Z</published>
    <updated>2018-10-26T08:57:32.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WCF服务"><a href="#WCF服务" class="headerlink" title="WCF服务"></a>WCF服务</h1><h2 id="1-创建一个接口，并给予ServiceContract协议"><a href="#1-创建一个接口，并给予ServiceContract协议" class="headerlink" title="1.创建一个接口，并给予ServiceContract协议"></a>1.创建一个接口，并给予ServiceContract协议</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[SerciveContract]</span><br><span class="line">public interface IWCFService</span><br><span class="line">&#123;</span><br><span class="line">[OperationContract]</span><br><span class="line">bool DoLogin(string username, string psswd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-创建一个继承IWCFService的类WCFService"><a href="#2-创建一个继承IWCFService的类WCFService" class="headerlink" title="2.创建一个继承IWCFService的类WCFService"></a>2.创建一个继承IWCFService的类WCFService</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Single)]</span><br><span class="line">public class WCFService :IWCFService</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public bool Dologin(string username, string psswd)</span><br><span class="line">&#123;</span><br><span class="line">//实现登录逻辑</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-定义宿主寄宿WCF服务"><a href="#3-定义宿主寄宿WCF服务" class="headerlink" title="3.定义宿主寄宿WCF服务"></a>3.定义宿主寄宿WCF服务</h2><p>寄宿方式分为4类：<br>1.”Self-Hosting” in a Managed Application（自托管宿主）<br>2.Managed Windows Services（Windows Services宿主）<br>3.Internet Information Services（IIS宿主）<br>4.Windows Process Activation Service（WAS宿主）</p><p>此例以第一种介绍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string uri = &quot;http://localhost:39005/WCFService&quot;;</span><br><span class="line">\\定义ServiceHost</span><br><span class="line">ServiceHost host = new ServiceHost(typeof(WCFService),new Uri(uri))；</span><br><span class="line"></span><br><span class="line">\\绑定参数</span><br><span class="line">BasicHttpBinding _basic = new BasicHttpBinding();</span><br><span class="line">_basic.MaxBufferPoolSize = int.MaxValue;</span><br><span class="line">_basic.MaxBufferSize = int.MaxValue;</span><br><span class="line">_basic.MaxReceivedMessageSize = int.MaxValue;</span><br><span class="line"></span><br><span class="line">\\行为参数</span><br><span class="line">System.Xml.XmlDictionaryReaderQuotas _readerQuotas = new XmlDictionaryReaderQuotas();</span><br><span class="line">_readerQuotas.MaxArrayLength = int.MaxValue;</span><br><span class="line">_readerQuotas.MaxBytesPerRead = int.MaxValue;</span><br><span class="line">_readerQuotas.MaxDepth = int.MaxValue;</span><br><span class="line">_readerQuotas.MaxNameTableCharCount = int.MaxValue;</span><br><span class="line">_readerQuotas.MaxStringContentLength = int.MaxValue;</span><br><span class="line">_basic.ReaderQuotas = _readerQuotas;</span><br><span class="line"></span><br><span class="line">\\开启服务</span><br><span class="line">host.AddServiceEndpoint(typeof(WCFService), _basic, uri);</span><br></pre></td></tr></table></figure></p><p><strong>通常的Windows App都是采用第二种寄主方式，可以随时开启和停止WCF服务</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WCF服务&quot;&gt;&lt;a href=&quot;#WCF服务&quot; class=&quot;headerlink&quot; title=&quot;WCF服务&quot;&gt;&lt;/a&gt;WCF服务&lt;/h1&gt;&lt;h2 id=&quot;1-创建一个接口，并给予ServiceContract协议&quot;&gt;&lt;a href=&quot;#1-创建一个接口，并给予
      
    
    </summary>
    
    
      <category term="C#" scheme="https://edwardlj.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Socket通讯</title>
    <link href="https://edwardlj.github.io/Socket/"/>
    <id>https://edwardlj.github.io/Socket/</id>
    <published>2018-10-23T09:44:39.093Z</published>
    <updated>2018-10-24T09:03:13.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Socket通讯"><a href="#Socket通讯" class="headerlink" title="Socket通讯"></a>Socket通讯</h1><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p>1.客户端发送请求报文a，发送信号为i<br>2.服务端接收报文a,回应客户端发送确认信号i+1,重置发送信号j<br>3.客户端收到确认报文，再次发送确认信号j+1，重置发送信号k。连接建立成功。<br><img src="/images/三次握手.png" alt=""></p><h2 id="简单的Socket例子"><a href="#简单的Socket例子" class="headerlink" title="简单的Socket例子"></a>简单的Socket例子</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="1-创建IPAddress和IPEndpoint"><a href="#1-创建IPAddress和IPEndpoint" class="headerlink" title="1.创建IPAddress和IPEndpoint"></a>1.创建IPAddress和IPEndpoint</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string host = &quot;127.0.0.1&quot;; //IPAddress.Any</span><br><span class="line">int port = 8005;</span><br><span class="line">IPAddress ip = IPAddress.Parse(host);</span><br><span class="line">IPEndpoint ipe = new IPEndpoint(ip,port);</span><br></pre></td></tr></table></figure></code></pre><h4 id="2-创建Socket，打开监听"><a href="#2-创建Socket，打开监听" class="headerlink" title="2.创建Socket，打开监听"></a>2.创建Socket，打开监听</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span><br><span class="line">Socket socket = new Socket(AddressFamuly.InterNetwork,SocketType.Stream,ProtocolType.TCP);</span><br><span class="line"></span><br><span class="line">//将该socket绑定到主机上面的某个端口</span><br><span class="line">socket.Blind(ipe);</span><br><span class="line"></span><br><span class="line">//启动监听，并且设置一个最大的队列长度(受理连接申请的最大值)</span><br><span class="line">socket.listen(10);</span><br></pre></td></tr></table></figure></code></pre><h4 id="3-接收报文"><a href="#3-接收报文" class="headerlink" title="3.接收报文"></a>3.接收报文</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Socket serverSocket = socket.Accept();</span><br><span class="line">byte[] recByte = new byte[1000];</span><br><span class="line">int length = serverSocket.Receive(recByte,recByte.Length,0);</span><br><span class="line">string resStr = Encoding.Unicode.GetString(recByte, 0, length);</span><br><span class="line">Console.WriteLine(recStr);</span><br></pre></td></tr></table></figure></code></pre><h4 id="4-发送报文"><a href="#4-发送报文" class="headerlink" title="4.发送报文"></a>4.发送报文</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string sendStr = &quot;Hello,clent&quot;;</span><br><span class="line">byte[] sendByte = Encoding.Unicode.GetBytes(sendStr);</span><br><span class="line">serverSocket.send(sendByte,sendByte.Length,0);</span><br><span class="line">serverSocket.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="1-和服务端第一步一样，创建IPAddress和IPEndpoint"><a href="#1-和服务端第一步一样，创建IPAddress和IPEndpoint" class="headerlink" title="1.和服务端第一步一样，创建IPAddress和IPEndpoint"></a>1.和服务端第一步一样，创建IPAddress和IPEndpoint</h3><pre><code>……</code></pre><h4 id="2-创建clientSocket，连接serverSocket"><a href="#2-创建clientSocket，连接serverSocket" class="headerlink" title="2.创建clientSocket，连接serverSocket"></a>2.创建clientSocket，连接serverSocket</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//创建一个新的Socket,这里我们使用最常用的基于TCP的Stream Socket（流式套接字）</span><br><span class="line">Socket clientSocket = new Socket(AddressFamuly.InterNetwork,SocketType.Stream,ProtocolType.TCP);</span><br><span class="line"></span><br><span class="line">//将该socket连接到主机上面的某个端口</span><br><span class="line">clientSocket.Connect(ipe);</span><br></pre></td></tr></table></figure></code></pre><h4 id="3-发送报文"><a href="#3-发送报文" class="headerlink" title="3.发送报文"></a>3.发送报文</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string sendStr = &quot;Hello,server&quot;;</span><br><span class="line">byte[] sendByte = Encoding.Unicode.GetBytes(sendStr);</span><br><span class="line">clientSocket.send(sendByte,sendByte.Length,0);</span><br></pre></td></tr></table></figure></code></pre><h4 id="4-接收报文"><a href="#4-接收报文" class="headerlink" title="4.接收报文"></a>4.接收报文</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte[] recByte = new byte[1000];</span><br><span class="line">int length = clientSocket.Receive(recByte,recByte.Length,0);</span><br><span class="line">string resStr = Encoding.Unicode.GetString(recByte, 0, length);</span><br><span class="line">Console.WriteLine(recStr);</span><br><span class="line">clientSocket.Close();</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Socket通讯&quot;&gt;&lt;a href=&quot;#Socket通讯&quot; class=&quot;headerlink&quot; title=&quot;Socket通讯&quot;&gt;&lt;/a&gt;Socket通讯&lt;/h1&gt;&lt;h2 id=&quot;TCP三次握手&quot;&gt;&lt;a href=&quot;#TCP三次握手&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>程序员如何准备面试中的算法</title>
    <link href="https://edwardlj.github.io/00.01/"/>
    <id>https://edwardlj.github.io/00.01/</id>
    <published>2018-08-07T07:24:09.530Z</published>
    <updated>2018-08-07T07:24:48.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员如何准备面试中的算法"><a href="#程序员如何准备面试中的算法" class="headerlink" title="程序员如何准备面试中的算法"></a>程序员如何准备面试中的算法</h1><h2 id="备战面试中算法的五个步骤"><a href="#备战面试中算法的五个步骤" class="headerlink" title="备战面试中算法的五个步骤"></a>备战面试中算法的五个步骤</h2><p>对于立志进一线互联网公司，同时不满足于一辈子干纯业务应用开发，希望在后端做点事情的同学来说，备战面试中的算法，分为哪几个步骤呢？如下：</p><h3 id="1、掌握一门编程语言"><a href="#1、掌握一门编程语言" class="headerlink" title="1、掌握一门编程语言"></a>1、掌握一门编程语言</h3><p>首先你得确保你已掌握好一门编程语言：  </p><ul><li>C的话，推荐Dennis M. Ritchie &amp; Brian W. Kernighan合著的《C程序设计语言》，和《C和指针》；  </li><li>C++ 则推荐《C++ Primer》，《深度探索C++对象模型》，《Effective C++》；</li><li>Java推荐《Thinking in Java》，《Core Java》，《Effictive Java》，《深入理解Java虚拟机》。  </li></ul><p>掌握一门语言并不容易，不是翻完一两本书即可了事，语言的细枝末节需要在平日不断的编程练习中加以熟练。</p><h3 id="2、过一遍微软面试100题系列"><a href="#2、过一遍微软面试100题系列" class="headerlink" title="2、过一遍微软面试100题系列"></a>2、过一遍微软面试100题系列</h3><p>我从2010年起开始整理<a href="http://blog.csdn.net/column/details/ms100.html" target="_blank" rel="noopener">微软面试100题系列</a>，见过的题目不可谓不多，但不管题目怎般变化，依然是那些常见的题型和考察点，当然，不考察任何知识点，纯粹考察编程能力的题目也屡见不鲜。故不管面试题千变万化，始终不离两点：①看你基本知识点的掌握情况；②编程基本功。</p><p>而当你看了一遍微软面试100题之后(不要求做完)，你自会意识到：数据结构和算法在笔试面试中的重要性。</p><h3 id="3、苦补数据结构基础"><a href="#3、苦补数据结构基础" class="headerlink" title="3、苦补数据结构基础"></a>3、苦补数据结构基础</h3><p>如果学数据结构，可以看我们在大学里学的任一本数据结构教材都行，如果你觉得实在不够上档次，那么可以再看看《STL源码剖析》。</p><p>然后，你会发现：大部分的面试题都在围绕一个点：基于各种数据结构上的增删改查。如字符串的查找翻转，链表的查找遍历合并删除，树和图的查找遍历，后来为了更好的查找，我们想到了排序，排序仍然不够，我们有了贪心、动态规划，再后来东西多了，于是有了海量数据处理，资源有限导致人们彼此竞争，出现了博弈组合概率。</p><h3 id="4、看算法导论"><a href="#4、看算法导论" class="headerlink" title="4、看算法导论"></a>4、看算法导论</h3><p>《算法导论》上的前大部分的章节都在阐述一些经典常用的数据结构和典型算法（如<a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/04.01.md" target="_blank" rel="noopener">二分查找</a>，<a href="http://blog.csdn.net/v_july_v/article/details/6116297" target="_blank" rel="noopener">快速排序</a>、<a href="http://blog.csdn.net/v_JULY_v/article/details/6256463" target="_blank" rel="noopener">Hash表</a>），以及一些高级数据结构（诸如<a href="https://github.com/Xuanwo/The-Art-Of-Programming-By-July/blob/master/ebook/zh/07.1.md" target="_blank" rel="noopener">红黑树</a>、<a href="http://blog.csdn.net/v_JULY_v/article/details/6530142" target="_blank" rel="noopener">B树</a>），如果你已经学完了一本数据结构教材，那么建议你着重看贪心、动态规划、图论等内容，这3个议题每一个议题都大有题目可出。同时，熟悉<a href="http://bigocheatsheet.com/" target="_blank" rel="noopener">常用算法的时间复杂度</a>。</p><p>如果算法导论看不懂，你可以参看本博客。</p><h3 id="5、刷leetcode或cc150或编程艺术系列"><a href="#5、刷leetcode或cc150或编程艺术系列" class="headerlink" title="5、刷leetcode或cc150或编程艺术系列"></a>5、刷leetcode或cc150或编程艺术系列</h3><ul><li><p>如主要在国外找工作，推荐两个面试编程网站：一个是<a href="http://leetcode.com/" target="_blank" rel="noopener">http://leetcode.com/</a> ，leetcode是国外一网站，它上面有不少编程题；另外一个是<a href="http://www.careercup.com/" target="_blank" rel="noopener">http://www.careercup.com/</a> ，而后这个网站的创始人写了本书，叫《careercup cracking coding interview》，最终这本英文书被图灵教育翻译出版为《程序员面试金典》。</p></li><li><p>若如果是国内找工作，则郑重推荐我编写的《程序员编程艺术》，有<a href="http://blog.csdn.net/v_JULY_v/article/details/6460494" target="_blank" rel="noopener">编程艺术博客版</a>，以及在博客版本基础上精简优化的<a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/Readme.md" target="_blank" rel="noopener">编程艺术github版</a>。除此之外，还可看看《编程之美》，与《剑指offer》。</p></li></ul><p>而不论是准备国内还是国外的海量数据处理面试题，此文必看：<a href="http://blog.csdn.net/v_july_v/article/details/7382693" target="_blank" rel="noopener">教你如何迅速秒杀掉：99%的海量数据处理面试题</a>。</p><p>此外，多看看优秀的开源代码，如<a href="https://github.com/nginx/nginx" target="_blank" rel="noopener">nginx</a>或<a href="http://redis.io/" target="_blank" rel="noopener">redis</a>，多做几个项目加以实践之，尽早实习（在一线互联网公司实习3个月可能胜过你自个黑灯瞎火摸爬滚打一年）。</p><p>当然，如果你是准备社招，且已经具备了上文所说的语言 &amp; 数据结构 &amp; 算法基础，可以直接跳到本第五步骤，开始刷leetcode或cc150或编程艺术系列。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>学习最忌心浮气躁，急功近利，即便练习了算法，也不一定代表能万无一失通过笔试面试关，因为总体说来，在一般的笔试面试中，70%<strong>基础</strong>+ 30%<strong>coding能力</strong>(含算法)，故如果做到了上文中的5个步骤，还远远不够，最后，我推荐一份非算法的书单，以此为大家查漏补缺(不必全部看完，欢迎大家补充)：</p><ol><li>《深入理解计算机系统》</li><li>W.Richard Stevens著的《TCP/IP详解三卷》，《UNIX网络编程二卷》，《UNIX环境高级编程：第2版》，详见此<a href="http://book.douban.com/search/W.Richard%20Stevens" target="_blank" rel="noopener">豆瓣页面</a>；</li><li>你如果要面机器学习一类的岗位，建议看看相关的算法（如<a href="http://blog.csdn.net/v_july_v/article/details/7624837" target="_blank" rel="noopener">支持向量机通俗导论（理解SVM的三层境界）</a>），及老老实实补补数学基础，包括微积分、线性代数、概率论与数理统计<em>（除了教材，推荐一本《数理统计学简史》）</em>、矩阵论<em>（推荐《矩阵分析与应用》）</em>等..</li></ol><p>最后望大家循序渐进，踏实前进，若实在觉得算法 &amp; 编程太难，转产品、运营、测试、运维、前端、设计都是不错的选择，因为虽然编程有趣，但不一定人人适合编程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序员如何准备面试中的算法&quot;&gt;&lt;a href=&quot;#程序员如何准备面试中的算法&quot; class=&quot;headerlink&quot; title=&quot;程序员如何准备面试中的算法&quot;&gt;&lt;/a&gt;程序员如何准备面试中的算法&lt;/h1&gt;&lt;h2 id=&quot;备战面试中算法的五个步骤&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="算法" scheme="https://edwardlj.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Joke</title>
    <link href="https://edwardlj.github.io/Joke/"/>
    <id>https://edwardlj.github.io/Joke/</id>
    <published>2018-07-18T06:37:00.558Z</published>
    <updated>2018-07-18T06:38:52.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你TM就是一个没有对象的野指针"><a href="#你TM就是一个没有对象的野指针" class="headerlink" title="你TM就是一个没有对象的野指针!!!"></a>你TM就是一个没有对象的野指针!!!</h1><ol><li><p>一程序员去面试，面试官问：“你毕业才两年，这三年工作经验是怎么来的？！”程序员答：“加班。”</p></li><li><p>某程序员对书法十分感兴趣，退休后决定在这方面有所建树。于是花重金购买了上等的文房四宝。一日，饭后突生雅兴，一番磨墨拟纸，并点上了上好的檀香，颇有王羲之风范，又具颜真卿气势，定神片刻，泼墨挥毫，郑重地写下一行字：hello world。</p></li><li><p>问：程序员最讨厌康熙的哪个儿子。答：胤禩。因为他是八阿哥（bug）</p></li><li><p>程序猿要了3个孩子，分别取名叫Ctrl、Alt 和Delete，如果他们不听话，程序猿就只要同时敲他们一下就会好的。</p></li><li><p>今天在公司听到一句惨绝人寰骂人的话：“你TM就是一个没有对象的野指针！”</p></li><li><p>程xx遭遇车祸成植物人，医生说她活下来的希望只有万分之一，唤醒更为渺茫。她的同事和亲人没放弃，并根据程xx对testing痴迷的作风，每天都在她身边念：“你测的模块上线后回滚了。”奇迹发生了，程xx醒来第一句话：确认那模块是我测的？</p></li><li><p>一个程序员在海滨游泳时溺水身亡。他死前拼命的呼救，当时海滩上有许多救生员，但是没有人救他。因为他一直大喊“F1!”“F1!”，谁都不知道“F1”究竟是什么意思。</p></li><li><p>世界上最远的距离，是我在if里你在else里，虽然经常一起出现，但却永不结伴执行。</p></li><li><p>正在码代码ing，医院回来的同事一脸的苦逼样子，问他怎么了？他回答：得了类风湿性关节炎了，我怕会遗传给下一代啊。我一脸的问号：谁说类风湿性关节炎能遗传的？丫一脸诧异：类不是继承的吗？</p></li><li><p>我很奇怪客栈这个词，难道后入住的必须先退房吗？</p></li><li><p>话说，决定一个程序员跳槽与否的关键因素是他前同事的现工资。</p></li><li><p>程序员最憋屈的事情就是：你辛辛苦苦熬夜写了一个风格优雅的源文件，被一个代码风格极差的同事改了且没署名，以至于别人都以为你是写的。</p></li><li><p>前端工程师说，我去交友网站找女朋友去了。朋友问，找到了么？工程师说，找到了他们页面的一个bug。</p></li><li><p>C程序员看不起C++程序员， C++程序员看不起Java程序员， Java程序员看不起C#程序员，C#程序员看不起美工，周末了，美工带着妹子出去约会了，一群程序员还在加班！</p></li><li><p>据说一老外年轻的时候，立志要当一名伟大的作家。怎么才算伟大呢？他说：我写的东西全世界都要看到！看完他们必定会歇斯底里！会火冒三丈！会痛苦万分！结果，他成功了，他在微软公司负责写系统蓝屏时的报错提示信息。</p></li><li><p>程序员应聘必备词汇：了解＝听过名字；熟悉＝知道是啥；熟练＝用过；精通＝做过东西。</p></li><li><p>两程序员聊天，程序员甲抱怨：“做程序员太辛苦了，我想换行……我该怎么办？”程序员乙：“敲一下回车。”</p></li><li><p>程序员最讨厌的四件事：写注释、写文档、别人不写注释、别人不写文档……</p></li><li><p>假如生活欺骗了你，找50个程序员问问为什么编程；假如生活让你想死，找50个程序员问问Bug改完了没有；假如你觉得生活拮据，找50个程序员问问工资涨了没有；假如你觉得活着无聊，找50个程序员问问他们一天都干了什么！</p></li><li><p>男人要记住，与女人吵架的要领是，要像在安装软件或注册网站时阅读“服务条款”那样，直接忽略所有的内容，到最后面勾选“我同意”，然后点击“确定”。</p></li><li><p>朋友今天遇到的真事：客户说我们设备卡，死活找不到原因，工程师赶到现场，给客户换了个鼠标垫，故障排除……</p></li><li><p>产品经理：“你明白吧，这里向右划可以出菜单，然后需要一个闪烁的动画，还有，我想这个tab可以拉下来，你懂吧？ 设计师：“别废话，把你要抄的产品给我看下。”</p></li><li><p>百度研发的无人驾驶汽车，你会发现有些地方你是去不了的。腾讯研发的无人驾驶汽车，你会发现很多地方你要去是要黄钻会员的。当然，谷歌研发的无人驾驶汽车，你会发现查无此车。</p></li><li><p>程序猿跟产品经理一起看电视。每个节目看到一半程序猿就换台，看到一半就换台，几次之后产品经理终于忍无可忍的咆哮：老子刚看出点意思你就换、刚看出点意思你就换，到底还让不让人看啦？！程序猿淡定的盯着电视道：你半路改需求的时候我可没吱过声！</p></li><li><p>“为什么删除手机上的图标的时候它们会抖？” “它们怕被删除呗。” “那为什么电话短信之类系统自带的删不掉的也在抖呢？” “那是它们在得瑟…”</p></li><li><p>有时候觉得，电脑就像一个高贵冷艳的妹纸。</p></li></ol><p>400，是她冷冰冰地说：“我听不懂你在说什么”；<br>401，是她无情地转身：“我不认识你，别说那些奇怪的话”；<br>403，是她残酷的拒绝：“我听懂你的话，也认出你的脸，可我不爱你”；<br>404，是她紧闭心门：“我这儿没有你想要的东西”；<br>503，是“呵呵我去洗澡”。</p><ol start="27"><li><p>她来例假了肚子疼，他坐着她旁边，看了她一眼，拿出手机玩游戏，她看在眼里，心里凉了半截。两分钟后，她实在坐不下去了，正准备离开，只见他默默地递过来他的小米手机说：拿去捂着。</p></li><li><p>今天看到我同事在笔记本电脑上实现“滑动解锁”！真的，看到我当场就震精了，异常碉堡……你知道吗？！他的电脑开机解锁密码是“ASDFGHJKL;’”，然后唰得一下过去最后一个键落在回车上，就，就解锁了！</p></li><li><p>边上工位的妹纸叫柳依依，她的爸爸也是位程序员，依依的大姐叫玲玲，二姐叫玲依，三姐叫依玲。</p></li><li><p>骗子网站太特么多了，你一打开，必定跳出一个很下流的游戏广告！——但这还不是最关键的，关键是如果你忍不住点击进入游戏之后，就会发现这些下流的元素全都不见了！这也太没有职业道德了吧！</p></li><li><p>最近发现自己陷入了一种状态，叫开机迷失。开电脑前，该做什么清清楚楚。但只要一登录，随手开个网页，刷下新闻微博甚至仅仅是音乐网站，然后再回过神来，已经到了深夜，要做的事一项没做。而最痛苦的是，在睡前闭眼的时候，整个被浪费的白天和那些被耽误的正事，总会掺杂着负罪感，无比清晰地浮现。</p></li><li><p>我要设计一个新的智能机应用程序叫做”惊慌”，只要你一说 老婆 这两个字, 它就会关闭所有网页, 隐藏所有跟女性的聊天以及怪怪的文件夹, 并且把我老婆的照片设为墙纸。</p></li><li><p>我从苹果手机的背面知道了一个好地方叫做加利福尼亚，据说那里有阳光和沙滩，还有Google和Tesla。据说那里的人经常讨论怎么创业，而不是怎么移民。我虽然在中国，但也去过那里，不是在梦中，而是通过VPN</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你TM就是一个没有对象的野指针&quot;&gt;&lt;a href=&quot;#你TM就是一个没有对象的野指针&quot; class=&quot;headerlink&quot; title=&quot;你TM就是一个没有对象的野指针!!!&quot;&gt;&lt;/a&gt;你TM就是一个没有对象的野指针!!!&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一程序
      
    
    </summary>
    
    
      <category term="搞笑" scheme="https://edwardlj.github.io/tags/%E6%90%9E%E7%AC%91/"/>
    
  </entry>
  
  <entry>
    <title>庐山行</title>
    <link href="https://edwardlj.github.io/%E8%AF%95%E8%AF%95%E6%B0%B4/"/>
    <id>https://edwardlj.github.io/试试水/</id>
    <published>2018-07-13T07:16:09.099Z</published>
    <updated>2019-01-25T09:21:40.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那个男人很不真实"><a href="#那个男人很不真实" class="headerlink" title="那个男人很不真实"></a>那个男人很不真实</h1><p><img src="/images/lushanxing.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;那个男人很不真实&quot;&gt;&lt;a href=&quot;#那个男人很不真实&quot; class=&quot;headerlink&quot; title=&quot;那个男人很不真实&quot;&gt;&lt;/a&gt;那个男人很不真实&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/lushanxing.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="分享" scheme="https://edwardlj.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>练习哈Markdown语法</title>
    <link href="https://edwardlj.github.io/Markdown/"/>
    <id>https://edwardlj.github.io/Markdown/</id>
    <published>2018-07-05T03:13:06.748Z</published>
    <updated>2019-01-29T04:25:25.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-标题："><a href="#一-标题：" class="headerlink" title="一.标题："></a>一.标题：</h1><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体："><a href="#二、字体：" class="headerlink" title="二、字体："></a>二、字体：</h1><h2 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> **这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br><span class="line"></span><br><span class="line">&lt;font  更改语法&gt;   你的内容   &lt;/font&gt;</span><br><span class="line">更改语法有: </span><br><span class="line"></span><br><span class="line">color=#0099ff   更改字体颜色</span><br><span class="line">face=&quot;黑体&quot;   更改字体</span><br><span class="line">size= 7     更改字体大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;</span><br><span class="line">&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;</span><br><span class="line">&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;**居中文字**&lt;/center&gt;</span><br></pre></td></tr></table></figure></code></pre><h2 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h2><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="7" face="黑体">color=#0099ff size=72 face=”黑体”</font><br><font color="#00ffff" size="72">color=#00ffff</font><br><font color="gray" size="72">color=gray</font><h1 id="三、”-“-或者-“-”的效果是酱紫的："><a href="#三、”-“-或者-“-”的效果是酱紫的：" class="headerlink" title="三、”- - -“ 或者 “***”的效果是酱紫的："></a>三、”- - -“ 或者 “***”的效果是酱紫的：</h1><h2 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h2><hr><h1 id="四、图片："><a href="#四、图片：" class="headerlink" title="四、图片："></a>四、图片：</h1><h2 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span><br><span class="line">u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg" alt="blockchain" title="区块链"></p><h1 id="五、超链接"><a href="#五、超链接" class="headerlink" title="五、超链接"></a>五、超链接</h1><h2 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http://jianshu.com)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure></code></pre><h2 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h2><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h1 id="六、表格"><a href="#六、表格" class="headerlink" title="六、表格"></a>六、表格</h1><h2 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h2><pre><code>表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><h2 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h2><table><thead><tr><th>表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><h1 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h1><h2 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h2><pre><code>单行代码        `代码内容`</code></pre><h2 id="效果：-6"><a href="#效果：-6" class="headerlink" title="效果："></a>效果：</h2><p>单行代码<br><code>hello 我的!</code></p><p>多行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for&#123;</span><br><span class="line">你哈</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="八、流程图"><a href="#八、流程图" class="headerlink" title="八、流程图"></a>八、流程图</h1><h2 id="示例：-6"><a href="#示例：-6" class="headerlink" title="示例："></a>示例：</h2><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-标题：&quot;&gt;&lt;a href=&quot;#一-标题：&quot; class=&quot;headerlink&quot; title=&quot;一.标题：&quot;&gt;&lt;/a&gt;一.标题：&lt;/h1&gt;&lt;h2 id=&quot;示例：&quot;&gt;&lt;a href=&quot;#示例：&quot; class=&quot;headerlink&quot; title=&quot;示例：&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://edwardlj.github.io/hello-world/"/>
    <id>https://edwardlj.github.io/hello-world/</id>
    <published>2018-07-04T10:01:39.919Z</published>
    <updated>2018-12-19T06:24:40.747Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p>#region<br>            string new_str = “”;<br>            for (int a = 1; a &lt;= 14; a++)<br>            {<br>                for (int b = 1; b &lt;= 14; b++)<br>                {<br>                    if(a != b)<br>                    {<br>                        for (int c = 1; c &lt;= 14; c++)<br>                        {<br>                            if (a != c &amp;&amp; b != c &amp;&amp; a + b + c == 20)<br>                            {<br>                                for (int d = 1; d &lt;= 14; d++)<br>                                {<br>                                    if (a != d &amp;&amp; b != d &amp;&amp; c != d)<br>                                    {<br>                                        for (int p = 1; p &lt;= 14; p++)<br>                                        {<br>                                            if (a != p &amp;&amp; b != p &amp;&amp; c != p &amp;&amp; d != p &amp;&amp; c + d + p == 20)<br>                                            {<br>                                                for (int f = 1; f &lt;= 14; f++)<br>                                                {<br>                                                    if (a != f &amp;&amp; b != f &amp;&amp; c != f &amp;&amp; d != f &amp;&amp; p != f)<br>                                                    {<br>                                                        for (int g = 1; g &lt;= 14; g++)<br>                                                        {<br>                                                            if (a != g &amp;&amp; b != g &amp;&amp; c != g &amp;&amp; d != g &amp;&amp; p != g &amp;&amp; f != g &amp;&amp; p + f + g == 20)<br>                                                            {<br>                                                                for (int h = 1; h &lt;= 14; h++)<br>                                                                {<br>                                                                    if (a != h &amp;&amp; b != h &amp;&amp; c != h &amp;&amp; d != h &amp;&amp; p != h &amp;&amp; f != h &amp;&amp; g != h)<br>                                                                    {<br>                                                                        for (int i = 1; i &lt;= 14; i++)<br>                                                                        {<br>                                                                            if (a != i &amp;&amp; b != i &amp;&amp; c != i &amp;&amp; d != i &amp;&amp; p != i &amp;&amp; f != i &amp;&amp; g != i &amp;&amp; h != i &amp;&amp; g + h + i == 20)<br>                                                                            {<br>                                                                                for (int j = 1; j &lt;= 14; j++)<br>                                                                                {<br>                                                                                    if (a != j &amp;&amp; b != j &amp;&amp; c != j &amp;&amp; d != j &amp;&amp; p != j &amp;&amp; f != j &amp;&amp; g != j &amp;&amp; h != j &amp;&amp; i != j)<br>                                                                                    {<br>                                                                                        for (int k = 1; k &lt;= 14; k++)<br>                                                                                        {<br>                                                                                            if (a != k &amp;&amp; b != k &amp;&amp; c != k &amp;&amp; d != k &amp;&amp; p != k &amp;&amp; f != k &amp;&amp; g != k &amp;&amp; h != k &amp;&amp; i != k &amp;&amp; j != k &amp;&amp; i + j + k == 20)<br>                                                                                            {<br>                                                                                                for (int l = 1; l &lt;= 14; l++)<br>                                                                                                {<br>                                                                                                    if (a != l &amp;&amp; b != l &amp;&amp; c != l &amp;&amp; d != l &amp;&amp; p != l &amp;&amp; f != l &amp;&amp; g != l &amp;&amp; h != l &amp;&amp; i != l &amp;&amp; j != l &amp;&amp; k != l)<br>                                                                                                    {<br>                                                                                                        for (int m = 1; m &lt;= 14; m++)<br>                                                                                                        {<br>                                                                                                            if (a != m &amp;&amp; b != m &amp;&amp; c != m &amp;&amp; d != m &amp;&amp; p != m &amp;&amp; f != m &amp;&amp; g != m &amp;&amp; h != m &amp;&amp; i != m &amp;&amp; j != m &amp;&amp; k != m &amp;&amp; l != m &amp;&amp; k + l + m == 20)<br>                                                                                                            {<br>                                                                                                                for (int n = 1; n &lt;= 14; n++)<br>                                                                                                                {<br>                                                                                                                    if (a != n &amp;&amp; b != n &amp;&amp; c != n &amp;&amp; d != n &amp;&amp; p != n &amp;&amp; f != n &amp;&amp; g != n &amp;&amp; h != n &amp;&amp; i != n &amp;&amp; j != n &amp;&amp; k != n &amp;&amp; l != n &amp;&amp; m != n &amp;&amp; m + n + a == 20)<br>                                                                                                                    {<br>                                                                                                                        string num = a + “ “ + b + “ “ + c + “ “ + d + “ “ + p + “ “ + f + “ “ + g + “ “ + h + “ “ + i + “ “ + j + “ “ + k + “ “ + l + “ “ + m + “ “ + n;<br>                                                                                                                        new_str = new_str + “\r\n” + num;<br>                                                                                                                    }<br>                                                                                                                }<br>                                                                                                            }</p><pre><code>                                                                                            }                                                                                        }                                                                                    }                                                                                }                                                                            }                                                                        }                                                                    }                                                                }                                                            }                                                        }                                                    }                                                }                                            }                                        }                                    }                                }                            }                        }                    }                }                                  }                            }    }}Console.Write(new_str);#endregion</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
